
Binary Search Tree
	O(logN) = avg
	O(N)    = Worst case
	O(1)    = Best Case
	
	
	//complete binary tree represented in 1d array
	
	balanced binary search trees
		AVL Tree is a type of balanced search tree
			AVL property is whether the depth of branches from a node varies by more than 1 length
		
		Red Black Trees
			---
	B-trees work when cost of node checking is really high.
		used in disk based searches.
		node has more than one value.
		children fit between values expressed.
	Heap
	-each node is greater than its children (the root of a subtree is greater than all of its children)
	- a heap is a complete binary tree.
	- heapify process (keep doing passes until you dont do any swaps).
	- used in a process called heapsort
		-take out root and heapify (repeat until you are out of nodes).
	Big O = N(logN)
	
	
	
	
1)
If the depth of child branches differs by more than 1, the tree is skewed.

2)
A tree where the depth of child branches does not differ by more than 1.

3)
An unbalanced tree can take an unreasonably long time to search through.
4)
When the height of a node's left and right subtrees differs by no more than one.
5)
A rotation is when a subtree is rearranged without disturbing any of its links.
6)
Each node in a B-Tree can have multiple values.
7)
A heap is a complete binary tree where the value of a node must be larger than the value of its children.

8)
You start out with a complete binary Tree, and then you iterate over this tree with heapify to gradually eventually the value of each node is larger than the value of its children.
9)
Heapsort pulls out each element of a tree in descending order.
	

